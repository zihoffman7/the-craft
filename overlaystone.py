from PIL import Image
import numpy as np
import random

# Load both stone and iron ore textures



# Convert images to RGBA arrays
# stone_array = np.array([79, 52, 9, 255, 77, 47, 3, 255, 88, 54, 6, 255, 84, 47, 0, 255, 87, 48, 0, 255, 86, 48, 0, 255, 80, 44, 0, 255, 87, 53, 2, 255, 77, 43, 0, 255, 83, 47, 0, 255, 88, 50, 0, 255, 91, 52, 0, 255, 86, 49, 0, 255, 88, 54, 6, 255, 82, 52, 8, 255, 78, 51, 8, 255, 81, 51, 7, 255, 87, 55, 8, 255, 138, 102, 52, 255, 147, 107, 54, 255, 140, 99, 45, 255, 141, 101, 47, 255, 144, 107, 53, 255, 138, 102, 49, 255, 140, 104, 51, 255, 143, 106, 52, 255, 140, 100, 46, 255, 146, 105, 51, 255, 146, 106, 53, 255, 136, 100, 50, 255, 93, 61, 14, 255, 74, 44, 0, 255, 87, 53, 5, 255, 140, 104, 54, 255, 145, 104, 49, 255, 161, 116, 59, 255, 166, 120, 61, 255, 166, 121, 62, 255, 162, 120, 62, 255, 161, 121, 63, 255, 159, 119, 61, 255, 164, 122, 64, 255, 160, 115, 56, 255, 164, 118, 59, 255, 166, 121, 64, 255, 145, 104, 49, 255, 140, 104, 54, 255, 87, 53, 5, 255, 88, 51, 0, 255, 146, 106, 53, 255, 168, 123, 66, 255, 147, 100, 39, 255, 152, 104, 42, 255, 151, 104, 42, 255, 148, 104, 42, 255, 145, 102, 41, 255, 147, 104, 43, 255, 148, 104, 42, 255, 150, 103, 41, 255, 155, 107, 45, 255, 145, 98, 37, 255, 163, 118, 61, 255, 147, 107, 54, 255, 84, 47, 0, 255, 91, 52, 0, 255, 144, 103, 49, 255, 164, 118, 59, 255, 156, 108, 46, 255, 146, 96, 33, 255, 167, 117, 54, 255, 163, 116, 54, 255, 167, 122, 60, 255, 167, 122, 60, 255, 164, 117, 55, 255, 169, 119, 56, 255, 148, 98, 35, 255, 153, 105, 43, 255, 162, 116, 57, 255, 146, 105, 51, 255, 84, 45, 0, 255, 87, 49, 0, 255, 144, 104, 50, 255, 160, 115, 56, 255, 148, 101, 39, 255, 172, 122, 59, 255, 152, 103, 39, 255, 148, 102, 40, 255, 147, 103, 41, 255, 143, 99, 37, 255, 150, 104, 42, 255, 151, 102, 38, 255, 168, 118, 55, 255, 150, 103, 41, 255, 165, 120, 61, 255, 145, 105, 51, 255, 84, 46, 0, 255, 84, 48, 0, 255, 139, 102, 48, 255, 164, 122, 64, 255, 150, 106, 44, 255, 160, 113, 51, 255, 149, 103, 41, 255, 148, 105, 44, 255, 159, 117, 58, 255, 163, 121, 62, 255, 145, 102, 41, 255, 151, 105, 43, 255, 163, 116, 54, 255, 146, 102, 40, 255, 165, 123, 65, 255, 143, 106, 52, 255, 79, 43, 0, 255, 77, 43, 0, 255, 142, 106, 53, 255, 159, 119, 61, 255, 146, 103, 42, 255, 169, 124, 62, 255, 144, 100, 38, 255, 162, 120, 61, 255, 148, 108, 49, 255, 146, 106, 47, 255, 162, 120, 61, 255, 145, 101, 39, 255, 169, 124, 62, 255, 145, 102, 41, 255, 158, 118, 60, 255, 143, 107, 54, 255, 84, 50, 0, 255, 87, 53, 2, 255, 138, 102, 49, 255, 161, 121, 63, 255, 145, 102, 41, 255, 167, 122, 60, 255, 147, 103, 41, 255, 159, 117, 58, 255, 148, 108, 49, 255, 148, 108, 49, 255, 162, 120, 61, 255, 144, 100, 38, 255, 169, 124, 62, 255, 146, 103, 42, 255, 159, 119, 61, 255, 142, 106, 53, 255, 77, 43, 0, 255, 80, 44, 0, 255, 144, 107, 53, 255, 162, 120, 62, 255, 148, 104, 42, 255, 163, 116, 54, 255, 148, 102, 40, 255, 148, 105, 44, 255, 162, 120, 61, 255, 159, 117, 58, 255, 148, 105, 44, 255, 149, 103, 41, 255, 160, 113, 51, 255, 150, 106, 44, 255, 164, 122, 64, 255, 139, 102, 48, 255, 84, 48, 0, 255, 86, 48, 0, 255, 141, 101, 47, 255, 166, 121, 62, 255, 151, 104, 42, 255, 167, 117, 54, 255, 152, 103, 39, 255, 149, 103, 41, 255, 144, 100, 38, 255, 147, 103, 41, 255, 148, 102, 40, 255, 152, 103, 39, 255, 172, 122, 59, 255, 148, 101, 39, 255, 160, 115, 56, 255, 144, 104, 50, 255, 87, 49, 0, 255, 87, 48, 0, 255, 140, 99, 45, 255, 166, 120, 61, 255, 152, 104, 42, 255, 146, 96, 33, 255, 173, 123, 60, 255, 160, 113, 51, 255, 169, 124, 62, 255, 167, 122, 60, 255, 163, 116, 54, 255, 167, 117, 54, 255, 146, 96, 33, 255, 156, 108, 46, 255, 164, 118, 59, 255, 144, 103, 49, 255, 91, 52, 0, 255, 84, 47, 0, 255, 147, 107, 54, 255, 161, 116, 59, 255, 147, 100, 39, 255, 156, 108, 46, 255, 148, 101, 39, 255, 150, 106, 44, 255, 146, 103, 42, 255, 145, 102, 41, 255, 148, 104, 42, 255, 151, 104, 42, 255, 152, 104, 42, 255, 147, 100, 39, 255, 168, 123, 66, 255, 146, 106, 53, 255, 88, 51, 0, 255, 89, 55, 7, 255, 138, 102, 52, 255, 145, 104, 49, 255, 168, 123, 66, 255, 164, 118, 59, 255, 160, 115, 56, 255, 164, 122, 64, 255, 159, 119, 61, 255, 161, 121, 63, 255, 162, 120, 62, 255, 166, 121, 62, 255, 166, 120, 61, 255, 161, 116, 59, 255, 145, 104, 49, 255, 140, 104, 54, 255, 87, 53, 5, 255, 77, 47, 3, 255, 87, 55, 8, 255, 140, 104, 54, 255, 146, 106, 53, 255, 144, 103, 49, 255, 144, 104, 50, 255, 139, 102, 48, 255, 142, 106, 53, 255, 138, 102, 49, 255, 144, 107, 53, 255, 141, 101, 47, 255, 140, 99, 45, 255, 147, 107, 54, 255, 138, 102, 52, 255, 87, 55, 8, 255, 81, 51, 7, 255, 79, 52, 9, 255, 81, 51, 7, 255, 87, 53, 5, 255, 88, 51, 0, 255, 91, 52, 0, 255, 87, 49, 0, 255, 84, 48, 0, 255, 77, 43, 0, 255, 87, 53, 2, 255, 80, 44, 0, 255, 86, 48, 0, 255, 87, 48, 0, 255, 84, 47, 0, 255, 88, 54, 6, 255, 77, 47, 3, 255, 79, 52, 9, 255],dtype='int32').reshape(16, 64)
stone_array = np.array([65, 30, 21, 255, 65, 30, 21, 255, 126, 96, 89, 255, 149, 134, 126, 255, 149, 134, 126, 255, 149, 134, 126, 255, 126, 96, 89, 255, 101, 71, 64, 255, 74, 44, 35, 255, 65, 30, 21, 255, 51, 24, 16, 255, 65, 30, 21, 255, 93, 52, 44, 255, 149, 134, 126, 255, 93, 52, 44, 255, 126, 96, 89, 255, 51, 24, 16, 255, 126, 96, 89, 255, 149, 134, 126, 255, 65, 30, 21, 255, 51, 24, 16, 255, 51, 24, 16, 255, 51, 24, 16, 255, 65, 30, 21, 255, 101, 71, 64, 255, 126, 96, 89, 255, 149, 134, 126, 255, 149, 134, 126, 255, 149, 134, 126, 255, 126, 96, 89, 255, 93, 52, 44, 255, 101, 71, 64, 255, 126, 96, 89, 255, 149, 134, 126, 255, 126, 96, 89, 255, 101, 71, 64, 255, 126, 96, 89, 255, 149, 134, 126, 255, 74, 44, 35, 255, 74, 44, 35, 255, 65, 30, 21, 255, 65, 30, 21, 255, 51, 24, 16, 255, 51, 24, 16, 255, 65, 30, 21, 255, 149, 134, 126, 255, 149, 134, 126, 255, 101, 71, 64, 255, 93, 52, 44, 255, 149, 134, 126, 255, 51, 24, 16, 255, 51, 24, 16, 255, 65, 30, 21, 255, 74, 44, 35, 255, 149, 134, 126, 255, 149, 134, 126, 255, 126, 96, 89, 255, 101, 71, 64, 255, 74, 44, 35, 255, 101, 71, 64, 255, 74, 44, 35, 255, 74, 44, 35, 255, 65, 30, 21, 255, 149, 134, 126, 255, 51, 24, 16, 255, 74, 44, 35, 255, 93, 52, 44, 255, 74, 44, 35, 255, 65, 30, 21, 255, 65, 30, 21, 255, 65, 30, 21, 255, 51, 24, 16, 255, 51, 24, 16, 255, 65, 30, 21, 255, 126, 96, 89, 255, 101, 71, 64, 255, 51, 24, 16, 255, 126, 96, 89, 255, 51, 24, 16, 255, 149, 134, 126, 255, 51, 24, 16, 255, 93, 52, 44, 255, 74, 44, 35, 255, 126, 96, 89, 255, 101, 71, 64, 255, 51, 24, 16, 255, 101, 71, 64, 255, 149, 134, 126, 255, 126, 96, 89, 255, 74, 44, 35, 255, 65, 30, 21, 255, 126, 96, 89, 255, 51, 24, 16, 255, 149, 134, 126, 255, 51, 24, 16, 255, 149, 134, 126, 255, 51, 24, 16, 255, 93, 52, 44, 255, 101, 71, 64, 255, 65, 30, 21, 255, 93, 52, 44, 255, 51, 24, 16, 255, 149, 134, 126, 255, 65, 30, 21, 255, 65, 30, 21, 255, 126, 96, 89, 255, 51, 24, 16, 255, 126, 96, 89, 255, 51, 24, 16, 255, 149, 134, 126, 255, 65, 30, 21, 255, 126, 96, 89, 255, 65, 30, 21, 255, 74, 44, 35, 255, 126, 96, 89, 255, 51, 24, 16, 255, 149, 134, 126, 255, 51, 24, 16, 255, 126, 96, 89, 255, 51, 24, 16, 255, 65, 30, 21, 255, 149, 134, 126, 255, 51, 24, 16, 255, 149, 134, 126, 255, 74, 44, 35, 255, 149, 134, 126, 255, 65, 30, 21, 255, 74, 44, 35, 255, 74, 44, 35, 255, 65, 30, 21, 255, 149, 134, 126, 255, 51, 24, 16, 255, 149, 134, 126, 255, 74, 44, 35, 255, 101, 71, 64, 255, 74, 44, 35, 255, 126, 96, 89, 255, 126, 96, 89, 255, 51, 24, 16, 255, 149, 134, 126, 255, 51, 24, 16, 255, 126, 96, 89, 255, 74, 44, 35, 255, 65, 30, 21, 255, 126, 96, 89, 255, 65, 30, 21, 255, 149, 134, 126, 255, 65, 30, 21, 255, 126, 96, 89, 255, 65, 30, 21, 255, 51, 24, 16, 255, 51, 24, 16, 255, 65, 30, 21, 255, 65, 30, 21, 255, 65, 30, 21, 255, 93, 52, 44, 255, 51, 24, 16, 255, 149, 134, 126, 255, 74, 44, 35, 255, 65, 30, 21, 255, 149, 134, 126, 255, 51, 24, 16, 255, 126, 96, 89, 255, 74, 44, 35, 255, 65, 30, 21, 255, 126, 96, 89, 255, 149, 134, 126, 255, 149, 134, 126, 255, 101, 71, 64, 255, 126, 96, 89, 255, 93, 52, 44, 255, 74, 44, 35, 255, 74, 44, 35, 255, 149, 134, 126, 255, 74, 44, 35, 255, 51, 24, 16, 255, 149, 134, 126, 255, 51, 24, 16, 255, 101, 71, 64, 255, 51, 24, 16, 255, 51, 24, 16, 255, 65, 30, 21, 255, 65, 30, 21, 255, 74, 44, 35, 255, 65, 30, 21, 255, 65, 30, 21, 255, 65, 30, 21, 255, 51, 24, 16, 255, 51, 24, 16, 255, 126, 96, 89, 255, 74, 44, 35, 255, 51, 24, 16, 255, 149, 134, 126, 255, 51, 24, 16, 255, 93, 52, 44, 255, 93, 52, 44, 255, 93, 52, 44, 255, 101, 71, 64, 255, 126, 96, 89, 255, 149, 134, 126, 255, 149, 134, 126, 255, 126, 96, 89, 255, 149, 134, 126, 255, 101, 71, 64, 255, 93, 52, 44, 255, 93, 52, 44, 255, 126, 96, 89, 255, 93, 52, 44, 255, 126, 96, 89, 255, 149, 134, 126, 255, 126, 96, 89, 255, 65, 30, 21, 255, 65, 30, 21, 255, 51, 24, 16, 255, 51, 24, 16, 255, 51, 24, 16, 255, 51, 24, 16, 255, 65, 30, 21, 255, 65, 30, 21, 255, 74, 44, 35, 255, 74, 44, 35, 255, 101, 71, 64, 255, 149, 134, 126, 255, 51, 24, 16, 255, 65, 30, 21, 255, 93, 52, 44, 255, 126, 96, 89, 255, 126, 96, 89, 255, 149, 134, 126, 255, 149, 134, 126, 255, 149, 134, 126, 255, 126, 96, 89, 255, 101, 71, 64, 255, 101, 71, 64, 255, 65, 30, 21, 255, 51, 24, 16, 255, 65, 30, 21, 255, 149, 134, 126, 255, 65, 30, 21, 255, 93, 52, 44, 255, 65, 30, 21, 255, 101, 71, 64, 255, 149, 134, 126, 255, 93, 52, 44, 255, 101, 71, 64, 255, 126, 96, 89, 255, 101, 71, 64, 255, 101, 71, 64, 255, 74, 44, 35, 255, 126, 96, 89, 255, 149, 134, 126, 255, 126, 96, 89, 255, 149, 134, 126, 255, 126, 96, 89, 255, 65, 30, 21, 255, 126, 96, 89, 255],dtype='int32').reshape(16, 64)


iron_array = np.array([88, 88, 88, 255, 88, 88, 88, 255, 89, 89, 89, 255, 88, 88, 88, 255, 87, 87, 87, 255, 90, 90, 90, 255, 92, 92, 92, 255, 89, 89, 89, 255, 84, 84, 84, 255, 84, 84, 84, 255, 87, 87, 87, 255, 90, 90, 90, 255, 88, 88, 88, 255, 84, 84, 84, 255, 84, 84, 84, 255, 88, 88, 88, 255, 87, 87, 87, 255, 92, 92, 92, 255, 82, 107, 80, 255, 82, 107, 80, 255, 91, 91, 91, 255, 93, 93, 93, 255, 93, 93, 93, 255, 90, 90, 90, 255, 89, 89, 89, 255, 86, 86, 86, 255, 82, 107, 80, 255, 82, 107, 80, 255, 91, 91, 91, 255, 90, 90, 90, 255, 91, 91, 91, 255, 93, 93, 93, 255, 94, 94, 94, 255, 82, 107, 80, 255, 217, 255, 235, 255, 23, 221, 98, 255, 84, 84, 84, 255, 88, 88, 88, 255, 92, 92, 92, 255, 92, 92, 92, 255, 90, 90, 90, 255, 82, 107, 80, 255, 217, 255, 235, 255, 23, 221, 98, 255, 88, 88, 88, 255, 89, 89, 89, 255, 89, 89, 89, 255, 89, 89, 89, 255, 92, 92, 92, 255, 91, 91, 91, 255, 23, 221, 98, 255, 0, 123, 24, 255, 89, 89, 89, 255, 89, 89, 89, 255, 82, 107, 80, 255, 87, 87, 87, 255, 87, 87, 87, 255, 89, 89, 89, 255, 23, 221, 98, 255, 0, 123, 24, 255, 88, 88, 88, 255, 89, 89, 89, 255, 92, 92, 92, 255, 94, 94, 94, 255, 91, 91, 91, 255, 89, 89, 89, 255, 90, 90, 90, 255, 90, 90, 90, 255, 87, 87, 87, 255, 82, 107, 80, 255, 55, 91, 62, 255, 82, 82, 82, 255, 91, 91, 91, 255, 92, 92, 92, 255, 91, 91, 91, 255, 87, 87, 87, 255, 85, 85, 85, 255, 86, 86, 86, 255, 89, 89, 89, 255, 90, 90, 90, 255, 87, 87, 87, 255, 92, 92, 92, 255, 91, 91, 91, 255, 91, 91, 91, 255, 89, 89, 89, 255, 65, 243, 132, 255, 65, 243, 132, 255, 28, 152, 41, 255, 82, 107, 80, 255, 89, 89, 89, 255, 84, 84, 84, 255, 83, 83, 83, 255, 84, 84, 84, 255, 86, 86, 86, 255, 87, 87, 87, 255, 87, 87, 87, 255, 85, 85, 85, 255, 84, 84, 84, 255, 87, 87, 87, 255, 55, 91, 62, 255, 65, 243, 132, 255, 217, 255, 235, 255, 0, 123, 24, 255, 28, 152, 41, 255, 55, 91, 62, 255, 85, 85, 85, 255, 84, 84, 84, 255, 87, 87, 87, 255, 91, 91, 91, 255, 82, 107, 80, 255, 82, 107, 80, 255, 84, 84, 84, 255, 86, 86, 86, 255, 82, 107, 80, 255, 82, 107, 80, 255, 55, 91, 62, 255, 65, 243, 132, 255, 0, 123, 24, 255, 28, 152, 41, 255, 23, 197, 68, 255, 55, 91, 62, 255, 82, 107, 80, 255, 89, 89, 89, 255, 94, 94, 94, 255, 82, 107, 80, 255, 217, 255, 235, 255, 23, 221, 98, 255, 86, 86, 86, 255, 82, 107, 80, 255, 217, 255, 235, 255, 23, 221, 98, 255, 93, 93, 93, 255, 23, 197, 68, 255, 28, 152, 41, 255, 85, 85, 85, 255, 84, 84, 84, 255, 84, 84, 84, 255, 84, 84, 84, 255, 84, 84, 84, 255, 84, 84, 84, 255, 85, 85, 85, 255, 23, 221, 98, 255, 0, 123, 24, 255, 89, 89, 89, 255, 90, 90, 90, 255, 23, 221, 98, 255, 0, 123, 24, 255, 91, 91, 91, 255, 92, 92, 92, 255, 91, 91, 91, 255, 90, 90, 90, 255, 90, 90, 90, 255, 87, 87, 87, 255, 86, 86, 86, 255, 82, 107, 80, 255, 82, 107, 80, 255, 87, 87, 87, 255, 91, 91, 91, 255, 94, 94, 94, 255, 96, 96, 96, 255, 94, 94, 94, 255, 90, 90, 90, 255, 88, 88, 88, 255, 88, 88, 88, 255, 89, 89, 89, 255, 90, 90, 90, 255, 91, 91, 91, 255, 93, 93, 93, 255, 89, 89, 89, 255, 65, 243, 132, 255, 65, 243, 132, 255, 55, 91, 62, 255, 89, 89, 89, 255, 88, 88, 88, 255, 87, 87, 87, 255, 86, 86, 86, 255, 87, 87, 87, 255, 87, 87, 87, 255, 84, 84, 84, 255, 84, 84, 84, 255, 84, 84, 84, 255, 84, 84, 84, 255, 87, 87, 87, 255, 90, 90, 90, 255, 0, 123, 24, 255, 65, 243, 132, 255, 217, 255, 235, 255, 0, 123, 24, 255, 28, 152, 41, 255, 88, 88, 88, 255, 86, 86, 86, 255, 86, 86, 86, 255, 89, 89, 89, 255, 87, 87, 87, 255, 86, 86, 86, 255, 87, 87, 87, 255, 82, 107, 80, 255, 82, 107, 80, 255, 91, 91, 91, 255, 93, 93, 93, 255, 0, 123, 24, 255, 23, 197, 68, 255, 0, 123, 24, 255, 28, 152, 41, 255, 23, 197, 68, 255, 83, 83, 83, 255, 84, 84, 84, 255, 84, 84, 84, 255, 87, 87, 87, 255, 92, 92, 92, 255, 93, 93, 93, 255, 82, 107, 80, 255, 217, 255, 235, 255, 23, 221, 98, 255, 88, 88, 88, 255, 88, 88, 88, 255, 85, 85, 85, 255, 55, 91, 62, 255, 28, 152, 41, 255, 87, 87, 87, 255, 87, 87, 87, 255, 89, 89, 89, 255, 92, 92, 92, 255, 94, 94, 94, 255, 92, 92, 92, 255, 91, 91, 91, 255, 90, 90, 90, 255, 90, 90, 90, 255, 23, 221, 98, 255, 0, 123, 24, 255, 83, 83, 83, 255, 83, 83, 83, 255, 90, 90, 90, 255, 92, 92, 92, 255, 95, 95, 95, 255, 96, 96, 96, 255, 95, 95, 95, 255, 93, 93, 93, 255, 92, 92, 92, 255, 92, 92, 92, 255, 90, 90, 90, 255, 87, 87, 87, 255, 86, 86, 86, 255, 87, 87, 87, 255, 88, 88, 88, 255, 90, 90, 90, 255, 93, 93, 93, 255, 96, 96, 96, 255, 88, 88, 88, 255, 90, 90, 90, 255, 90, 90, 90, 255, 90, 90, 90, 255, 87, 87, 87, 255, 86, 86, 86, 255, 86, 86, 86, 255, 86, 86, 86, 255],dtype='int32').reshape(16, 64)

# Define a threshold to detect the iron ore pixels in the iron texture
# In Minecraft, iron ore usually has a distinct non-gray color (reddish, brownish)
# We'll assume iron ore is detected by pixels that are not shades of gray
def is_stone_pixel(pixel):
    r, g, b, a = pixel
    return ((r == g == b))  # Stone pixels are shades of gray where R == G == B

# Iterate through each pixel in the iron ore texture
for row in range(iron_array.shape[0]):  # Iterate over rows
    for col in range(0, iron_array.shape[1], 4):  # Iterate over columns in steps of 4
        # if is_stone_pixel(stone_array[row, col:col+4]):
            r,g,b,a = stone_array[row, col:col+4]

            g*=2
            if g>255:
                g = 255
            r *=.4
            # b*=1.25
            # r = b


            stone_array[row, col:col+4] = r,g,b,a

        # if not is_stone_pixel(iron_array[row, col:col+4]):
        #     stone_array[row, col:col+4] = iron_array[row, col:col+4]  # Get 4 elements from matrix B


# Convert back to an image
combined_texture = stone_array.flatten().tolist()
print(combined_texture)
